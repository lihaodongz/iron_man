原则上编写程序我们希望程序不要抛出异常，尤其是未知异常。所以必定会有一个全局的异常捕获。
Dao Service Controller
对于异常可以有两种处理思路。
1. 所有的遗产捕获全部放到最Controller处理。
2. dao层的异常service处理。service 异常controller处理。切记service处理方式不可以是抛出给controller。
service 层封装了 业务逻辑和dao层的操作。dao的异常我们直接try-catch 然后回滚即可。业务逻辑处理流程中的错误 我们抛给controller 处理。controller 进行友好的展示。

serivice层代码除去 dao层交互，业务逻辑，还有调用别的接口。此时别的接口可以分为本机和第三方接口。第三方接口的话必须进行封装成才可以使用，确保在进去service层之前保证数据的正确性
别的service层代码必须调用过程发生了异常，此时还是有该层的controller进行捕获处理。

分页原计划是采用pagehelper 但是版本不一致导致加载不了。所以暂不考虑分页查询该功能。必要的地方sql写死。分页查询这个功能暂不考虑



for 循环中 多次请求数据库，而且查询条件一致，那样的话会多次请求数据库，查询成本太高了
可以改为使用in 语句来优化


统一接口的参数封装，目前风格有两种，一种是为每一个接口设置一个参数的封装对象和返回对象。缺点是繁琐，
还有一种将好几个接口的参数封装到一起，只传递必传的参数。但是可读性降低。因为参数有可能属于不用的业务领，有可能多个参数。



iron-man 一期对于购物车其实没有落地数据库，是采用redis+goods[数据库表] 来实现购物车 。二期进行改造